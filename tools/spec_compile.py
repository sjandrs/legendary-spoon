#!/usr/bin/env python3
"""
Spec Compile

Aggregates the master spec (main.md) and prioritized module specs under spec/ into a single
compiled artifact at spec/COMPILED_SPEC.md.

Design goals
- Dependency-free (stdlib only), deterministic ordering
- Prioritize spec/spec-design-master.md immediately after main.md
- Include a simple header and a table of contents referencing included files

Exit codes
 0 = success, artifact written
 1 = failure (blocking issues)
"""
from __future__ import annotations

import sys
from datetime import datetime, timezone
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
SPEC_DIR = ROOT / "spec"
MASTER_SPEC = SPEC_DIR / "spec-design-master.md"
MAIN_MD = ROOT / "main.md"
OUT_FILE = SPEC_DIR / "COMPILED_SPEC.md"


def read_text(path: Path) -> str:
    try:
        return path.read_text(encoding="utf-8")
    except (FileNotFoundError, UnicodeDecodeError, PermissionError):
        return ""


def gather_spec_sources() -> list[Path]:
    """Return an ordered list of sources: main.md, master
      spec, then other spec/*.md (stable order)."""
    sources: list[Path] = []
    if MAIN_MD.exists():
        sources.append(MAIN_MD)
    if MASTER_SPEC.exists():
        sources.append(MASTER_SPEC)

    # Add the rest of spec/*.md excluding the master and the output file
    other_specs: list[Path] = []
    if SPEC_DIR.exists():
        for p in sorted(SPEC_DIR.glob("*.md"), key=lambda p: p.name.lower()):
            if p == MASTER_SPEC or p == OUT_FILE:
                continue
            other_specs.append(p)
    # Concatenate
    sources.extend(other_specs)
    return sources


def build_compiled_markdown(sources: list[Path]) -> str:
    timestamp = datetime.now(timezone.utc).isoformat()
    header = [
        "<!-- AUTO-GENERATED: Do not edit this file directly. -->",
        "---",
        "title: Converge CRM â€” Compiled Specification",
        "version: 1.0",
        f"generated_at: {timestamp}",
        "source_priority: [main.md, spec/spec-design-master.md, spec/*.md]",
        "---\n",
        "# Compiled Specification",
        "This document aggregates the master spec (main.md) and module specs under `spec/`.",
        "",
        "## Contents",
    ]

    toc_lines = []
    for idx, src in enumerate(sources, start=1):
        rel = src.relative_to(ROOT).as_posix()
        toc_lines.append(f"- [{idx}. {rel}]({rel})")

    parts = ["\n".join(header + toc_lines), "\n---\n"]

    for idx, src in enumerate(sources, start=1):
        rel = src.relative_to(ROOT).as_posix()
        parts.append(f"\n\n## {idx}. Source: {rel}\n")
        parts.append(read_text(src))

    return "\n".join(parts) + "\n"


def main() -> int:
    if not SPEC_DIR.exists():
        print(f"ERROR: Missing spec directory: {SPEC_DIR}")
        return 1

    sources = gather_spec_sources()
    if not sources:
        print("ERROR: No sources found for compilation (expected main.md and spec/*.md)")
        return 1

    compiled = build_compiled_markdown(sources)
    OUT_FILE.write_text(compiled, encoding="utf-8")
    print(f"Compiled {len(sources)} sources -> {OUT_FILE.relative_to(ROOT)}")
    return 0


if __name__ == "__main__":
    sys.exit(main())
