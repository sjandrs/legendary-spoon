import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { BrowserRouter } from 'react-router-dom';
import BudgetList from '../../components/BudgetList';
import { renderWithProviders } from '../helpers/test-utils';
import * as api from '../../api';

// Mock the API module
jest.mock('../../api');
const mockApi = api;

describe('BudgetList', () => {
  const user = userEvent.setup();

  const mockBudgets = [
    {
      id: 1,
      category: 'office_supplies',
      period: '2025-10',
      amount: 1500.00,
      spent_amount: 875.50,
      notes: 'Q4 office supplies budget'
    },
    {
      id: 2,
      category: 'marketing',
      period: '2025-10',
      amount: 5000.00,
      spent_amount: 2100.75,
      notes: 'Marketing campaign budget'
    },
    {
      id: 3,
      category: 'travel',
      period: '2025-11',
      amount: 3000.00,
      spent_amount: 0,
      notes: 'Travel budget for conferences'
    }
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    mockApi.get = jest.fn();
  });

  describe('Component Rendering', () => {
    it('renders budget list with heading', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      renderWithProviders(<BudgetList />);

      expect(screen.getByRole('heading', { name: /budgets/i })).toBeInTheDocument();
      await waitFor(() => {
        expect(screen.getByText('Office Supplies')).toBeInTheDocument();
      });
    });

    it('displays add budget button', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      renderWithProviders(<BudgetList />);

      expect(screen.getByRole('link', { name: /add budget/i })).toBeInTheDocument();
    });

    it('shows loading state initially', () => {
      mockApi.get.mockImplementation(() => new Promise(() => {})); // Never resolves

      renderWithProviders(<BudgetList />);

      expect(screen.getByText(/loading budgets.../i)).toBeInTheDocument();
    });
  });

  describe('Budget Data Display', () => {
    beforeEach(() => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });
    });

    it('displays budget information in table format', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Office Supplies')).toBeInTheDocument();
        expect(screen.getByText('Marketing')).toBeInTheDocument();
        expect(screen.getByText('Travel')).toBeInTheDocument();
      });
    });

    it('formats currency amounts correctly', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('$1,500.00')).toBeInTheDocument();
        expect(screen.getByText('$5,000.00')).toBeInTheDocument();
        expect(screen.getByText('$875.50')).toBeInTheDocument();
      });
    });

    it('calculates and displays variance correctly', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        // Office supplies: $1500 budgeted, $875.50 spent = $624.50 remaining
        expect(screen.getByText('$624.50')).toBeInTheDocument();
        // Marketing: $5000 budgeted, $2100.75 spent = $2899.25 remaining
        expect(screen.getByText('$2,899.25')).toBeInTheDocument();
      });
    });

    it('displays period information correctly', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('2025-10')).toBeInTheDocument();
        expect(screen.getByText('2025-11')).toBeInTheDocument();
      });
    });

    it('shows budget notes when available', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Q4 office supplies budget')).toBeInTheDocument();
        expect(screen.getByText('Marketing campaign budget')).toBeInTheDocument();
        expect(screen.getByText('Travel budget for conferences')).toBeInTheDocument();
      });
    });
  });

  describe('Budget Category Display', () => {
    it('displays readable category names', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Office Supplies')).toBeInTheDocument();
        expect(screen.getByText('Marketing')).toBeInTheDocument();
        expect(screen.getByText('Travel')).toBeInTheDocument();
      });
    });

    it('handles different category types', async () => {
      const categorizedBudgets = [
        { id: 1, category: 'utilities', period: '2025-10', amount: 800, spent_amount: 650 },
        { id: 2, category: 'software', period: '2025-10', amount: 1200, spent_amount: 999 },
        { id: 3, category: 'other', period: '2025-10', amount: 500, spent_amount: 100 }
      ];

      mockApi.get.mockResolvedValue({ data: categorizedBudgets });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Utilities')).toBeInTheDocument();
        expect(screen.getByText('Software')).toBeInTheDocument();
        expect(screen.getByText('Other')).toBeInTheDocument();
      });
    });
  });

  describe('Variance Analysis', () => {
    it('shows over-budget scenarios correctly', async () => {
      const overBudgetData = [
        {
          id: 1,
          category: 'travel',
          period: '2025-10',
          amount: 1000.00,
          spent_amount: 1250.00, // Over budget
          notes: 'Emergency travel expenses'
        }
      ];

      mockApi.get.mockResolvedValue({ data: overBudgetData });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        // Should show negative variance
        expect(screen.getByText('-$250.00')).toBeInTheDocument();
      });
    });

    it('handles zero spent amounts', async () => {
      const zeroSpentData = [
        {
          id: 1,
          category: 'equipment',
          period: '2025-11',
          amount: 2000.00,
          spent_amount: 0,
          notes: 'Future equipment purchases'
        }
      ];

      mockApi.get.mockResolvedValue({ data: zeroSpentData });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('$0.00')).toBeInTheDocument(); // Spent amount
        expect(screen.getByText('$2,000.00')).toBeInTheDocument(); // Remaining equals budget
      });
    });

    it('handles undefined spent amounts', async () => {
      const undefinedSpentData = [
        {
          id: 1,
          category: 'professional_services',
          period: '2025-10',
          amount: 1500.00,
          spent_amount: undefined,
          notes: 'Legal services budget'
        }
      ];

      mockApi.get.mockResolvedValue({ data: undefinedSpentData });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        // Should treat undefined as 0
        expect(screen.getByText('$1,500.00')).toBeInTheDocument(); // Full budget remaining
      });
    });
  });

  describe('Table Structure', () => {
    beforeEach(() => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });
    });

    it('has proper table headers', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Category')).toBeInTheDocument();
        expect(screen.getByText('Period')).toBeInTheDocument();
        expect(screen.getByText('Budgeted')).toBeInTheDocument();
        expect(screen.getByText('Spent')).toBeInTheDocument();
        expect(screen.getByText('Remaining')).toBeInTheDocument();
        expect(screen.getByText('Notes')).toBeInTheDocument();
      });
    });

    it('uses striped table styling', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        const table = screen.getByRole('table');
        expect(table).toHaveClass('striped-table');
      });
    });

    it('displays data in correct table structure', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        const rows = screen.getAllByRole('row');
        expect(rows).toHaveLength(4); // Header + 3 data rows
      });
    });
  });

  describe('Error Handling', () => {
    it('displays error message when API call fails', async () => {
      mockApi.get.mockRejectedValue(new Error('Network error'));

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText(/failed to load budgets/i)).toBeInTheDocument();
      });
    });

    it('handles empty budget list', async () => {
      mockApi.get.mockResolvedValue({ data: [] });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        // Should still show table headers
        expect(screen.getByText('Category')).toBeInTheDocument();
        // But no budget rows
        const rows = screen.getAllByRole('row');
        expect(rows).toHaveLength(1); // Only header row
      });
    });

    it('handles malformed API response', async () => {
      mockApi.get.mockResolvedValue({ data: null });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        // Should handle gracefully without crashing
        expect(screen.getByRole('heading', { name: /budgets/i })).toBeInTheDocument();
      });
    });
  });

  describe('API Integration', () => {
    it('calls budgets API endpoint on mount', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      renderWithProviders(<BudgetList />);

      expect(mockApi.get).toHaveBeenCalledWith('/api/budgets/');
    });

    it('handles API response correctly', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Office Supplies')).toBeInTheDocument();
      });
    });
  });

  describe('Navigation Integration', () => {
    it('links to budget creation form', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      renderWithProviders(<BudgetList />);

      const addButton = screen.getByRole('link', { name: /add budget/i });
      expect(addButton).toHaveAttribute('href', '/budgets/new');
    });

    it('renders within routing context', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      render(
        <BrowserRouter>
          <BudgetList />
        </BrowserRouter>
      );

      await waitFor(() => {
        expect(screen.getByRole('heading', { name: /budgets/i })).toBeInTheDocument();
      });
    });
  });

  describe('Accessibility', () => {
    beforeEach(() => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });
    });

    it('has proper table structure for screen readers', async () => {
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByRole('table')).toBeInTheDocument();
        expect(screen.getByRole('columnheader', { name: /category/i })).toBeInTheDocument();
        expect(screen.getByRole('columnheader', { name: /period/i })).toBeInTheDocument();
      });
    });

    it('provides meaningful headings', async () => {
      renderWithProviders(<BudgetList />);

      const heading = screen.getByRole('heading', { name: /budgets/i });
      expect(heading).toBeInTheDocument();
      expect(heading.tagName).toBe('H2');
    });

    it('has accessible action buttons', async () => {
      renderWithProviders(<BudgetList />);

      const addButton = screen.getByRole('link', { name: /add budget/i });
      expect(addButton).toBeInTheDocument();
    });
  });

  describe('Performance', () => {
    it('renders efficiently with large budget lists', async () => {
      const largeBudgetList = Array.from({ length: 50 }, (_, i) => ({
        id: i + 1,
        category: 'office_supplies',
        period: `2025-${String((i % 12) + 1).padStart(2, '0')}`,
        amount: 1000 + i * 100,
        spent_amount: 500 + i * 50,
        notes: `Budget ${i + 1}`
      }));

      mockApi.get.mockResolvedValue({ data: largeBudgetList });

      const startTime = performance.now();
      renderWithProviders(<BudgetList />);

      await waitFor(() => {
        expect(screen.getByText('Budget 1')).toBeInTheDocument();
      });

      const endTime = performance.now();
      expect(endTime - startTime).toBeLessThan(500); // Should render within 500ms
    });

    it('handles concurrent API calls gracefully', async () => {
      mockApi.get.mockResolvedValue({ data: mockBudgets });

      // Render multiple instances
      renderWithProviders(
        <div>
          <BudgetList />
          <BudgetList />
        </div>
      );

      // Should not cause issues with multiple API calls
      expect(mockApi.get).toHaveBeenCalledTimes(2);
    });
  });
});
