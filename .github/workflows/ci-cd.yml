name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, Feature-Bootcamp ]
  pull_request:
    branches: [ main, develop, Feature-Bootcamp ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    - name: Run Django migrations
      run: |
        python manage.py migrate
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    - name: Run backend tests with coverage
      run: |
        python -m coverage run manage.py test
        python -m coverage report --fail-under=70
        python -m coverage xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: Backend Coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend unit tests
      run: |
        cd frontend
        npm run test

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: Frontend Coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Set up test database
      run: |
        python manage.py migrate
        python manage.py seed_data
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    - name: Build frontend for E2E tests
      run: |
        cd frontend
        npm run build

    - name: Start backend server
      run: |
        python manage.py runserver &
        echo $! > backend.pid
        sleep 10
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    - name: Start frontend server
      run: |
        cd frontend
        npm run preview -- --port 5173 &
        echo $! > frontend.pid
        sleep 5

    - name: Wait for servers to be ready
      run: |
        npx wait-on http://localhost:8000/api/health/ http://localhost:5173/ --timeout 60000

    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: frontend
        browser: chrome
        headless: true
        record: false
        config-file: cypress.config.js
      env:
        CYPRESS_BASE_URL: http://localhost:5173
        CYPRESS_API_URL: http://localhost:8000/api

    - name: Upload E2E test screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots

    - name: Upload E2E test videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
        if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi

  quality-checks:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Python linting
      run: |
        flake8 main web --max-line-length=100 --extend-ignore=E203,W503

    - name: Check Python formatting with Black
      run: |
        black --check --diff main web

    - name: Check Python imports with isort
      run: |
        isort --check-only --diff main web

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r main web -f json -o bandit-report.json || true

    - name: Run Safety vulnerability check
      run: |
        safety check --output json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  build-and-deploy:
    needs: [test-backend, test-frontend, e2e-tests, quality-checks]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        # Add your deployment commands here

  notify:
    needs: [test-backend, test-frontend, e2e-tests, quality-checks, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "Tests failed - check the logs above for details"

    - name: Notify on success
      if: success()
      run: |
        echo "All tests passed successfully!"
