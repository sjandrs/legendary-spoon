# Generated by Django 5.2.6 on 2025-09-30 20:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('main', '0028_analyticssnapshot_customerlifetimevalue_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True,
                 serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('tech_level', models.PositiveIntegerField(help_text='Certification level (1-10)')),
                ('category', models.CharField(choices=[
                    ('safety', 'Safety'), ('equipment', 'Equipment'),
                    ('vendor', 'Vendor Specific'), ('general', 'General')
                ], max_length=100)),
                ('requires_renewal', models.BooleanField(default=True)),
                ('renewal_period_months', models.PositiveIntegerField(blank=True, null=True)),
                ('issuing_authority', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True,
                 serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('hire_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('base_hourly_rate', models.DecimalField(decimal_places=2, max_digits=8)),
                ('emergency_contact', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True,
                 on_delete=django.db.models.deletion.SET_NULL,
                 related_name='technician_profile',
                 to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EnhancedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True,
                 serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True,
                 verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                 help_text='Designates that this user has all permissions '
                           'without explicitly assigning them.',
                 verbose_name='superuser status')),
                ('username', models.CharField(
                    error_messages={'unique': 'A user with that username already exists.'},
                    help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                    max_length=150, unique=True,
                    validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                    verbose_name='username'
                )),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                 help_text='Designates whether the user can log into this admin site.',
                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                 help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                 verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('job_title', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('custom_fields', models.JSONField(default=dict)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(
                    blank=True,
                    help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                    related_name='enhanceduser_set', related_query_name='enhanceduser',
                    to='auth.group', verbose_name='groups'
                )),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='main.enhanceduser')),
                ('user_permissions', models.ManyToManyField(
                    blank=True, help_text='Specific permissions for this user.',
                    related_name='enhanceduser_set', related_query_name='enhanceduser',
                    to='auth.permission', verbose_name='user permissions'
                )),
                ('technician', models.OneToOneField(
                    blank=True, null=True,
                    on_delete=django.db.models.deletion.SET_NULL,
                    related_name='user_account', to='main.technician'
                )),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TechnicianAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.PositiveSmallIntegerField(choices=[
                    (0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'),
                    (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')
                ])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('technician', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='availability', to='main.technician'
                )),
            ],
        ),
        migrations.CreateModel(
            name='CoverageArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_code', models.CharField(max_length=10)),
                ('travel_time_minutes', models.PositiveIntegerField(default=0)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('technician', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='coverage_areas', to='main.technician'
                )),
            ],
            options={
                'unique_together': {('technician', 'zip_code')},
            },
        ),
        migrations.CreateModel(
            name='TechnicianCertification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obtained_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('certificate_number', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('certification', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='main.certification'
                )),
                ('technician', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='certifications', to='main.technician'
                )),
            ],
            options={
                'unique_together': {('technician', 'certification')},
            },
        ),
        migrations.CreateModel(
            name='WorkOrderCertificationRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_required', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('certification', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='main.certification'
                )),
                ('work_order', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='certification_requirements', to='main.workorder'
                )),
            ],
            options={
                'unique_together': {('work_order', 'certification')},
            },
        ),
    ]
